// var a = 10;
// var b = 20;
// var a = 20;
// console.log(a);

// for ( i=0; i<=5; i++)
// {
//     let j = 0;
//     let j = 7;
//     j = 10;
// }

// let i = 10;
// if (true) {
//     let i = 20;
//     console.log(i);
// }
// console.log(i);

// function scope () {
//     console.log(a);
//     var a = 12;
    
//     let b = 22;
//     console.log(b);
   
// }
// console.log(scope());

// let c = 30;
// c = 40; 
// console.log(c);

// const price = 500 ;
// price = 400;
// console.log(price);

// const groceries = { bread: 20, potatoes:40};
// // groceries = {tomato :10};
// console.log(groceries);

// Print the characters in a string separated by space.
// input : guvi

// to split the string:
// var str = "guvi";
// console.log(...str);

// to retrive the value of array of an individual elements :
// var arr = ['hello','guvi'];
// console.log(...arr);

// to add multiple arrays :
// var arr1 = [1,2,3,4];
// var arr2 = [5,6,7,8];
// var arr3 = [...arr1,...arr2];
// console.log(arr3);

// function sum(arg1, arg2){
//     return arg1 + arg2;
//  }
//  console.log(sum(1,2));

//  function sum(...args){
    
//     let total = 0;
//     for(let number of args){
//        total += number;
//     }
//     return total;
//  }
//  console.log(sum(1, 2));
//  console.log(sum(1,2,3,4,5,6,7,8));

// myBio("Oluwatobi", "Sofela", "CodeSweetly", "Web Developer", "Male");

// function myBio(firstName, lastName, ...otherInfo) {
//    return otherInfo;
//  }
//  console.log(myBio("Oluwatobi", "Sofela", "CodeSweetly", "Web Developer", "Male"));

//  const [firstName, lastName, ...otherInfo] = [
//    "Oluwatobi",
//    "Sofela",
//    "CodeSweetly",
//    "Web Developer",
//    "Male",
//  ];
 
//  // Invoke the otherInfo variable:
//  console.log(otherInfo);
// let student = {
//    name : "john",
//    dept : "FSD",
//    work: "guvi",
//    address :{
//       no:7,
//       street : "patel road",
//       place : "chennai"
//    },
// };

// let student1 = {
//    name : "john1",
//    dept : "FSD2",
//    work: "guvi3",
//    address :{
//       no:75,
//       street : "patel road4",
//       place : "chennai5"
//    },
// };

// const { address } = student1 ;

// const { no } = address ;

// console.log(no);

// let subjects  = ["tamil" , "english" , ["maths","hindi"], "science"];

// const [a,b,c] = subjects;

// // const [m,h] = c;

// console.log(one);

// let name = "john";
// let string = "hello" + name + ",welcome to guvi";

// console.log(string);

// let name = "john";
// let string = `hello ${name} ,welcome to guvi`;

// console.log(string);

let a = 5 ;
let b = 10;
// console.log('Fifteen is' + (a+b) + 'and not' + (2*a+b) + '.');
console.log(`Fifteen is ${a+b}  and not ${2*a+b}.`);

notes.txt

let and const 
ES5 and ES6
ES = ECMASCRIPT

to overcome the limitations of var , let and const are introduced 
var = global scope can be re assign and also can be redeclared .
let can be re assign but cannot re declare 
const cannot be reassign and also cant be redeclared 
let and const are called as  block scope

spread operator/ rest operator: 

... three dots 

spread can be used in normal as well as arrays, can use many number of spread operators 
rest operator can be used in arrays and inside the functions  => put the rest of array elements, we cannot use many operators
must be the last parameter of the function. if not it throws error .

destructuring:

js expression that allows unplug the values from arrays or properties of objects.
datas can be extracted from array , objects , nested objects.
if we have n number of datas , and if we want to extract some particular data of a particular person , then we can go for destructuring 

const { } = variable name

template literals: works same as concatination ... to create a lengthy sentence.

`${}`



